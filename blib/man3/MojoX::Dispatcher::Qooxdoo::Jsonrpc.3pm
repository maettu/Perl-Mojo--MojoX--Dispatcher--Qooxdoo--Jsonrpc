.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MojoX::Dispatcher::Qooxdoo::Jsonrpc 3pm"
.TH MojoX::Dispatcher::Qooxdoo::Jsonrpc 3pm "2010-09-21" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MojoX::Dispatcher::Qooxdoo::Jsonrpc \- Dispatcher for Qooxdoo Json Rpc Calls
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # lib/your\-application.pm
\& 
\& use RpcService::Test;
\& 
\& sub startup {
\&    my $self = shift;
\&    
\&    # instantiate all services
\&    my $services= {
\&        Test => new RpcService::Test(),
\&        
\&    };
\&    
\&    
\&    # add a route to the Qooxdoo dispatcher and route to it
\&    my $r = $self\->routes;
\&    $r\->route(\*(Aq/qooxdoo\*(Aq) \->
\&            to(\*(Aq
\&                Jsonrpc#handle_request\*(Aq, 
\&                services    => $services, 
\&                debug       => 0,
\&                namespace   => \*(AqMojoX::Dispatcher::Qooxdoo\*(Aq
\&            );
\&        
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MojoX::Dispatcher::Qooxdoo::Jsonrpc dispatches incoming
rpc requests from a qooxdoo application to your services and renders
a (hopefully) valid json reply.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example exposes a service named \*(L"Test\*(R" in a folder \*(L"RpcService\*(R".
The Mojo application is named \*(L"qooxdooserver\*(R". The scripts are in
the 'example' directory.
First create this application using 
\&\*(L"mojolicious generate app qooxdooserver\*(R".
.PP
Then, lets write the service:
.PP
Change to the root directory \*(L"qooxdooserver\*(R" of your fresh 
Mojo-Application and make a dir named 'qooxdoo\-services' 
for the services you want to expose.
.PP
Our \*(L"Test\*(R"\-service could look like:
.PP
.Vb 1
\& package RpcService::Test;
\&
\& sub new{
\&    my $class = shift;
\&    
\&    my $object = {
\&        
\&    };
\&    bless $object, $class;
\&    return $object;
\& }
\&
\& sub add{
\&    my $self = shift;
\&    my @params = @_;
\&    
\&    # Debug message on Mojo\-server console (or log)
\&    print "Debug: $params[0] + $params[1]\en";
\&    
\&    # uncomment if you want to die without further handling
\&    # die;
\&    
\&    # uncomment if you want to die with a message in a hash
\&    # die {code => 20, message => "Test died on purpose :\-)"};
\&    
\&    
\&    # uncomment if you want to die with your homemade error object 
\&    # (simple example see below)
\&    # better use your elaborate error handling instead!
\&    
\&    # use Error;
\&    # my $error = new Error(\*(Aqstupid error message\*(Aq, \*(Aq56457\*(Aq);
\&    # die $error;
\&    
\&    my $result =  $params[0] + $params[1]
\&    return $result;
\&    
\& }
\&
\& 1;
\& 
\& 
\& # Example of simple and stupid Error class:
\& 
\& package Error;
\&
\& sub new{
\&    my $class = shift;
\&    
\&    my $error = {
\&        message => shift;
\&        code    => shift;
\&    };
\&    
\&    bless $error, $class;
\&    return $error;
\& }
\&
\& sub message{
\&    my $self = shift;
\&    return $self\->{message};
\& }
\&
\& sub code{
\&    my $self = shift;
\&    return $self\->{code};
\& }
.Ve
.PP
1;
.PP
Please create a constructor (like \*(L"new\*(R" here) which instantiates
an object because we are going to use this in
our 'lib/qooxdooserver.pm' below.
.PP
Notice the exception handling: You can die without or with a message 
(see example above). 
MojoX::Dispatcher::Qooxdoo::Jsonrpc will catch the \*(L"die\*(R" like an 
exception an send a message to the client.
Happy dying! :\-)
.PP
Now, lets write our application.
Almost everything should have been prepared by Mojo when you invoked 
\&\*(L"mojolicious generate app qooxdooserver\*(R" (see above).
.PP
Change to \*(L"lib/\*(R" and open \*(L"qooxdooserver.pm\*(R" in your favourite editor.
Then add some lines to make it look like this:
.PP
.Vb 1
\& package qooxdooserver;
\&
\& use strict;
\& use warnings;
\& 
\& use RpcService::Test;
\&
\& use base \*(AqMojolicious\*(Aq;
\&
\& # This method will run once at server start
\& sub startup {
\&    my $self = shift;
\&    
\&    my $services= {
\&        Test => new RpcService::Test(),
\&        # more services here
\&    };
\&    
\&    # tell Mojo about your services:
\&    my $r = $self\->routes;
\&    
\&    # this sends all requests for "/qooxdoo" in your Mojo server 
\&    # to our little dispatcher.
\&    # change this at your own taste.
\&    $r\->route(\*(Aq/qooxdoo\*(Aq)\->to(\*(Aq
\&        jsonrpc#handle_request\*(Aq, 
\&        services    => $services, 
\&        debug       => 0,
\&        namespace   => \*(AqMojoX::Dispatcher::Qooxdoo\*(Aq
\&    );
\&    
\& }
\&
\& 1;
.Ve
.PP
Now start your Mojo Server by issuing 'script/qooxdooserver daemon'. 
If you want to change any options, type 'script/qooxdooserver help'.
.SS "Security MojoX::Dispatcher::Qooxdoo::Jsonrpc only allows methods matching this pattern: /^[a\-zA\-Z_]+$/ This means you are allowed to use letters and the underscore. Be aware that methods starting with an underscore are private by convention and not exposed."
.IX Subsection "Security MojoX::Dispatcher::Qooxdoo::Jsonrpc only allows methods matching this pattern: /^[a-zA-Z_]+$/ This means you are allowed to use letters and the underscore. Be aware that methods starting with an underscore are private by convention and not exposed."
Only services explicitly loaded in lib/your\-application.pm
will be accessible.
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthias Bloch, <lt>matthias at puffin ch<gt>
This Module is sponsored by \s-1OETIKER+PARTNER\s0 \s-1AG\s0
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by :m)
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
